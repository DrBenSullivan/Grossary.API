# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER app
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["./Grossary.Api.csproj", "Grossary.Api/"]
COPY ["../Grossary.Application/Grossary.Application.csproj", "Grossary.Application/"]
COPY ["../Grossary.Core/Grossary.Core.csproj", "Grossary.Core/"]
COPY ["../Grossary.Infrastructure/Grossary.Infrastructure.csproj", "Grossary.Infrastructure/"]

# Restore the project dependencies
RUN dotnet restore "./Grossary.Api/Grossary.Api.csproj"

# Copy the entire source code to the container
COPY .. .

# Set the working directory to the API project
WORKDIR "/src/Grossary.Api"

# Build the service project
RUN dotnet build "./Grossary.Api.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./Grossary.Api.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Grossary.Api.dll"]
